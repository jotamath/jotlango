// Authentication API example
import "http"
import "io"
import "crypto"

class Usuario {
    prop string Id
    prop string Email
    prop string SenhaHash
    prop list[string] Roles
    prop int Pontos
    prop string DataCriacao
    
    fn New(): void {
        this.Roles = list[string]{}
        this.Pontos = 0
    }
    
    fn AdicionarRole(role: string): void {
        this.Roles.Add(role)
        this.Pontos = this.Pontos + 10
    }
    
    fn ToJson(): map[string]string {
        return {
            "id": this.Id,
            "email": this.Email,
            "roles": this.Roles.ToString(),
            "pontos": this.Pontos.ToString(),
            "dataCriacao": this.DataCriacao
        }
    }
}

class AuthApi {
    prop map[string]Usuario Usuarios
    
    fn New(): void {
        this.Usuarios = map[string]Usuario{}
    }
    
    fn Registrar(email: string, senha: string): map[string]string {
        if this.Usuarios.ContainsKey(email) {
            return {
                "sucesso": "false",
                "mensagem": "Email já cadastrado"
            }
        }
        
        var usuario: Usuario = new Usuario()
        usuario.Id = "user_" + DateTime.Now.Ticks
        usuario.Email = email
        usuario.SenhaHash = senha // Em produção, usar hash seguro
        usuario.DataCriacao = DateTime.Now.ToString()
        
        this.Usuarios[email] = usuario
        return {
            "sucesso": "true",
            "mensagem": "Usuário registrado com sucesso"
        }
    }
    
    fn Login(email: string, senha: string): map[string]string {
        if !this.Usuarios.ContainsKey(email) {
            return {
                "sucesso": "false",
                "mensagem": "Credenciais inválidas"
            }
        }
        
        var usuario: Usuario = this.Usuarios[email]
        if usuario.SenhaHash == senha { // Em produção, comparar hashes
            return {
                "sucesso": "true",
                "mensagem": "Login realizado com sucesso",
                "usuario": usuario.ToJson()
            }
        }
        
        return {
            "sucesso": "false",
            "mensagem": "Credenciais inválidas"
        }
    }
}

class Programa {
    fn Main(): void {
        var api: AuthApi = new AuthApi()
        
        // Teste de registro
        var resultadoRegistro: map[string]string = api.Registrar("usuario@teste.com", "senha123")
        print("Resultado do registro: " + resultadoRegistro["mensagem"])
        
        // Teste de login
        var resultadoLogin: map[string]string = api.Login("usuario@teste.com", "senha123")
        print("Resultado do login: " + resultadoLogin["mensagem"])
        
        // Teste de login com credenciais inválidas
        var resultadoLoginInvalido: map[string]string = api.Login("usuario@teste.com", "senhaerrada")
        print("Resultado do login inválido: " + resultadoLoginInvalido["mensagem"])
    }
}

// Create server instance
server = new http.Server {
    Port = 8080,
    Routes = {}
}

// Create API instance
api = new AuthApi {
    Usuarios = {}
}

// Configure routes
server.post("/auth/register", api.register)
server.post("/auth/login", api.login)

// Start server
io.println("Auth API started on port 8080...")
io.println("Available endpoints:")
io.println("- POST /auth/register")
io.println("- POST /auth/login")
call server.listen()