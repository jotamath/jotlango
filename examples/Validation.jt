// =============================
// Validation.jt
// =============================
class Endereco {
    prop string Cep
    prop string Logradouro
    prop string Numero
    prop string Complemento
    prop string Bairro
    prop string Cidade
    prop string Estado
    
    fn New(): void {
        this.Cep = ""
        this.Logradouro = ""
        this.Numero = ""
        this.Complemento = ""
        this.Bairro = ""
        this.Cidade = ""
        this.Estado = ""
    }
}

class Cliente {
    prop string Nome
    prop string Cpf
    prop int Idade
    prop Endereco Endereco
    
    fn New(): void {
        this.Endereco = new Endereco()
    }
}

class CpfValidator {
    fn Validar(cpf: string): bool {
        // Remove caracteres não numéricos
        cpf = cpf.Replace(".", "").Replace("-", "")
        
        // Verifica se tem 11 dígitos
        if cpf.Length != 11 {
            return false
        }
        
        // Verifica se todos os dígitos são iguais
        var todosIguais: bool = true
        for var i: int = 1; i < cpf.Length; i++ {
            if cpf[i] != cpf[0] {
                todosIguais = false
                break
            }
        }
        if todosIguais {
            return false
        }
        
        // Validação básica do CPF
        return true
    }
}

class IdadeValidator {
    fn Validar(idade: int): bool {
        return idade >= 18 && idade <= 120
    }
}

class ClienteController {
    prop CpfValidator CpfValidator
    prop IdadeValidator IdadeValidator
    
    fn New(): void {
        this.CpfValidator = new CpfValidator()
        this.IdadeValidator = new IdadeValidator()
    }
    
    fn CriarCliente(cliente: Cliente): map[string]string {
        if !this.CpfValidator.Validar(cliente.Cpf) {
            return {
                "sucesso": "false",
                "mensagem": "CPF inválido"
            }
        }
        
        if !this.IdadeValidator.Validar(cliente.Idade) {
            return {
                "sucesso": "false",
                "mensagem": "Idade inválida"
            }
        }
        
        // Simulação de criação do cliente
        return {
            "sucesso": "true",
            "mensagem": "Cliente criado com sucesso"
        }
    }
}

class Programa {
    fn Main(): void {
        var controller: ClienteController = new ClienteController()
        
        // Criando um endereço
        var endereco: Endereco = new Endereco()
        endereco.Cep = "12345-678"
        endereco.Logradouro = "Rua Teste"
        endereco.Numero = "123"
        endereco.Bairro = "Centro"
        endereco.Cidade = "São Paulo"
        endereco.Estado = "SP"
        
        // Criando um cliente
        var cliente: Cliente = new Cliente()
        cliente.Nome = "João Silva"
        cliente.Cpf = "123.456.789-00"
        cliente.Idade = 25
        cliente.Endereco = endereco
        
        // Tentando criar o cliente
        var resultado: map[string]string = controller.CriarCliente(cliente)
        print("Resultado: " + resultado["mensagem"])
        
        // Testando com CPF inválido
        cliente.Cpf = "111.111.111-11"
        resultado = controller.CriarCliente(cliente)
        print("Resultado com CPF inválido: " + resultado["mensagem"])
        
        // Testando com idade inválida
        cliente.Cpf = "123.456.789-00"
        cliente.Idade = 15
        resultado = controller.CriarCliente(cliente)
        print("Resultado com idade inválida: " + resultado["mensagem"])
    }
}

