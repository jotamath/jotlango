// =============================
// Calculos.jt
// =============================
module Calculos

// Importar módulos necessários
import "io"
import "math"

fn CalcularIMC(peso: float, altura: float) : float {
    return peso / (altura * altura)
}

fn AreaDoCirculo(raio: float) : float {
    return 3.14 * raio * raio
}

fn SomaLista(numeros: list<int>) : int {
    var soma = 0
    foreach n in numeros {
        soma += n
    }
    return soma
}

fn Main() : void {
    var imc = CalcularIMC(70, 1.75)
    print("IMC: {imc}")

    var area = AreaDoCirculo(5)
    print("Área do círculo: {area}")

    var total = SomaLista([1, 2, 3, 4, 5])
    print("Soma: {total}")
}

class Calculadora {
    fn calcularArea(raio float) : float {
        area = math.PI * math.pow(raio, 2)
        return area
    }

    fn calcularVolume(raio float, altura float) : float {
        areaBase = call calcularArea(raio)
        volume = areaBase * altura
        return volume
    }

    fn calcularRaizes(a float, b float, c float) : map<string, float> {
        // Fórmula de Bhaskara
        delta = math.pow(b, 2) - 4 * a * c
        
        if delta < 0 then {
            io.println("Não existem raízes reais")
            return {}
        }
        
        raizDelta = math.sqrt(delta)
        x1 = (-b + raizDelta) / (2 * a)
        x2 = (-b - raizDelta) / (2 * a)
        
        return {
            "x1" = x1,
            "x2" = x2
        }
    }
}

// Criar calculadora
calc = new Calculadora {}

// Testar área do círculo
raio = 5
area = call calc.calcularArea(raio)
io.println("Área do círculo com raio {raio}: {area}")

// Testar volume do cilindro
altura = 10
volume = call calc.calcularVolume(raio, altura)
io.println("Volume do cilindro: {volume}")

// Testar equação do segundo grau
raizes = call calc.calcularRaizes(1, -5, 6)
io.println("Raízes da equação x² - 5x + 6 = 0:")
io.println("x1 = {raizes.x1}")
io.println("x2 = {raizes.x2}")