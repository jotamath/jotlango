// Teste completo das funcionalidades do JotLang
class Test {
    // Propriedades da classe
    prop Nome: string;
    prop Idade: int;
    prop Salario: float;

    // Construtor
    fn New(): void {
        this.Nome = "João";
        this.Idade = 25;
        this.Salario = 5000.0;
    }

    // Método principal
    fn Main(): void {
        // Inicializa a classe
        this.New();
        
        // Teste de propriedades da classe
        print("=== Teste de Propriedades ===");
        print("Nome: " + this.Nome);
        print("Idade: " + this.Idade);
        print("Salário: " + this.Salario);
        print("");
        
        // Teste de operações matemáticas
        print("=== Teste de Operações Matemáticas ===");
        let soma = this.somar(10, 20);
        print("10 + 20 = " + soma);
        
        let media = this.calcularMedia(60, 70, 80);
        print("Média de 60, 70 e 80 = " + media);
        print("");
        
        // Teste de strings
        print("=== Teste de Strings ===");
        let mensagem = "Olá, " + this.Nome + "!";
        this.imprimirMensagem(mensagem);
        print("");
        
        // Teste de outra classe
        print("=== Teste de Outra Classe ===");
        let pessoa = new Pessoa();
        pessoa.Apresentar();
        
        let novoSalario = pessoa.CalcularAumento(10);
        print("Novo salário com aumento de 10%: " + novoSalario);
    }

    // Funções auxiliares
    fn somar(a: int, b: int): int {
        return a + b;
    }

    fn imprimirMensagem(mensagem: string): void {
        print(mensagem);
    }

    fn calcularMedia(a: int, b: int, c: int): float {
        return (a + b + c) / 3.0;
    }
}

// Classe de exemplo
class Pessoa {
    prop string Nome
    prop int Idade
    prop float Salario

    fn Apresentar(): void {
        print("Nome: " + this.Nome)
        print("Idade: " + this.Idade)
        print("Salário: " + this.Salario)
    }

    fn CalcularAumento(percentual: int): float {
        return this.Salario * (1 + (percentual / 100.0));
    }

    fn AumentarSalario(percentual: float): void {
        this.Salario = this.Salario * (1 + percentual/100)
    }
} 